library("car")  # load the 'car' package
data("Anscombe")  # load the data set
?Anscombe  # read a description of the data
head(Anscombe)  # look at the first few lines of the data
pairs(Anscombe)  # scatter plots for each pair of variables
?Anscombe
?lm
#linear model non-informative
lmod = lm( Anscombe$education ~ income + young + urban, data = Anscombe )
View(lmod)
resid(lmod)
View(Anscombe)
plot(resid(lmod))
qqnorm(y = resid(lmod))
str(lmod)
summary(lmod)
pairs(Anscombe)  # scatter plots for each pair of variables
?Anscombe  # read a description of the data
# Bayesian Model
library("rjags")
mod_string = " model {
for (i in 1:length(education)) {
education[i] ~ dnorm(mu[i], prec)
mu[i] = b0 + b[1]*income[i] + b[2]*young[i] + b[3]*urban[i]
}
b0 ~ dnorm(0.0, 1.0/1.0e6)
for (i in 1:3) {
b[i] ~ dnorm(0.0, 1.0/1.0e6)
}
prec ~ dgamma(1.0/2.0, 1.0*1500.0/2.0)
## Initial guess of variance based on overall
## variance of education variable. Uses low prior
## effective sample size. Technically, this is not
## a true 'prior', but it is not very informative.
sig2 = 1.0 / prec
sig = sqrt(sig2)
} "
data_jags = as.list(Anscombe)
lmod1 = jags.model(textConnection(mod_string),data = data_jags,n.chains = 3, inits = inits)
inits = function(){
init = list("b0"=0.0, "b[1]"=0.0,"b[2]"=0.0, "b[3]"=0.0, "prec"= 1.0)
}
lmod1 = jags.model(textConnection(mod_string),data = data_jags,n.chains = 3, inits = inits)
init = list("b0"=0.0, "b"= rnorm(n = 3, mean = 0, sd = 1.0e6), "prec"= rgamma(n = 1, shape = 1.0, rate = 1.0))
lmod1 = jags.model(textConnection(mod_string),data = data_jags,n.chains = 3, inits = inits)
inits = function(){
init = list("b0"=0.0, "b"= rnorm(n = 3, mean = 0, sd = 1.0e6), "prec"= rgamma(n = 1, shape = 1.0, rate = 1.0))
}
lmod1 = jags.model(textConnection(mod_string),data = data_jags,n.chains = 3, inits = inits)
data_jags = as.list(Anscombe)
library("car")  # load the 'car' package
data("Anscombe")  # load the data set
?Anscombe  # read a description of the data
head(Anscombe)  # look at the first few lines of the data
pairs(Anscombe)  # scatter plots for each pair of variables
#linear model non-informative
lmod = lm( Anscombe$education ~ income + young + urban, data = Anscombe )
resid(lmod)
plot(resid(lmod))
qqnorm(y = resid(lmod))
str(lmod)
summary(lmod)
##coefficients : Named num [1:4] -286.8388 0.0807 0.8173 -0.1058
# Bayesian Model
library("rjags")
mod_string = " model {
for (i in 1:length(education)) {
education[i] ~ dnorm(mu[i], prec)
mu[i] = b0 + b[1]*income[i] + b[2]*young[i] + b[3]*urban[i]
}
b0 ~ dnorm(0.0, 1.0/1.0e6)
for (i in 1:3) {
b[i] ~ dnorm(0.0, 1.0/1.0e6)
}
prec ~ dgamma(1.0/2.0, 1.0*1500.0/2.0)
## Initial guess of variance based on overall
## variance of education variable. Uses low prior
## effective sample size. Technically, this is not
## a true 'prior', but it is not very informative.
sig2 = 1.0 / prec
sig = sqrt(sig2)
} "
data_jags = as.list(Anscombe)
inits = function(){
init = list("b0"=0.0, "b"= rnorm(n = 3, mean = 0, sd = 1.0e6), "prec"= rgamma(n = 1, shape = 1.0, rate = 1.0))
}
lmod1 = jags.model(textConnection(mod_string),data = data_jags,n.chains = 3, inits = inits)
plot(lmod1)
params = c("bo","b","sig")
lmod1_sim = coda.samples(lmod1, variable.names =params, n.iter = 5e3 )
params = c("b0","b","sig")
lmod1_sim = coda.samples(lmod1, variable.names =params, n.iter = 5e3 )
plot(lmod1_sim)
params = c("b0","b","sig")
lmod1_sim = coda.samples(lmod1, variable.names =params, n.iter = 5e3 )
plot(lmod1_sim)
params = c("b","sig")
lmod1_sim = coda.samples(lmod1, variable.names =params, n.iter = 5e3 )
plot(lmod1_sim)
gelman.diag(lmod1_sim)
autocorr.diag(lmod1_sim)
autocorr.plot(lmod1_sim, lag.max = 500)
plot(lmod1_sim)
gelman.diag(lmod1_sim)
autocorr.diag(lmod1_sim)
autocorr.plot(lmod1_sim, lag.max = 500)
plot(lmod1_sim)
traceplot(lmod1_sim)
plot(lmod1_sim )
# posterior means
summary(lmod1_sim)
lmod1_sim = coda.samples(lmod1, variable.names =params, n.iter = 1e4 )
# posterior means
summary(lmod1_sim)
lmod1_sim = coda.samples(lmod1, variable.names =params, n.iter = 1e5 )
# posterior means
summary(lmod1_sim)
params = c("b0","b","sig")
lmod1_sim = coda.samples(lmod1, variable.names =params, n.iter = 1e5 )
# posterior means
summary(lmod1_sim)
coefficients : Named num [1:4] -286.8388 0.0807 0.8173 -0.1058coefficients : Named num [1:4] -286.8388 0.0807 0.8173 -0.1058
# posterior means
summary(lmod1_sim)
plot(lmod)
plot(lmod)
summary(lmod)
plot(lmod1_sim )
setwd("C:/Users/DK186039/OneDrive - Teradata/1personal/Bayesian Statistics")
data("airquality")
head(airquality)
dat = na.omit(airquality)
head(dat)
mod3_string = "model{
for (i in 1: length(y)){
y[i] ~ dnorm(mu[i], prec)
mu[i] = b[1] + b[2]* ozone[i] + b[3]* wind[i] + b[4]* ozone[i]* ozone[i] + b[5]* wind[i]* wind[i] + b[6]* ozone[i]* wind[i]
}
for( j in 1:6){
b[j] ~ dnorm(0.0, 1.0/1.0e6)
}
prec ~ dgamma(5/2,25)
sig2 = 1/prec
sig  = sqrt(sig2)
}"
data3_jags = list(y= dat$Temp, ozone = dat$Ozone, wind = dat$Wind)
mod3 = jags.model(textConnection(mod3_string),data = data3_jags, n.chains = 3)
library("rjags")
data("airquality")
head(airquality)
mod3_string = "model{
for (i in 1: length(y)){
y[i] ~ dnorm(mu[i], prec)
mu[i] = b[1] + b[2]* ozone[i] + b[3]* wind[i] + b[4]* ozone[i]* ozone[i] + b[5]* wind[i]* wind[i] + b[6]* ozone[i]* wind[i]
}
for( j in 1:6){
b[j] ~ dnorm(0.0, 1.0/1.0e6)
}
prec ~ dgamma(5/2,25)
sig2 = 1/prec
sig  = sqrt(sig2)
}"
data3_jags = list(y= dat$Temp, ozone = dat$Ozone, wind = dat$Wind)
mod3 = jags.model(textConnection(mod3_string),data = data3_jags, n.chains = 3)
update(mod3, n.iter = 1e3)
params3 = c("b","sig")
mod3_sim = coda.samples(mod3, variable.names = params3, n.iter = 5e3)
summary(mod3_sim)
dic.samples(mod3, n.iter = 1e3)
coeff = coefficients(mod3)
yhat = coeff$b[1] + coeff$b[2]* data2_jags$ozone + coeff$b[3]* data2_jags$wind + coeff$b[4]* data2_jags$ozone * data2_jags$ozone + coeff$b[5]* data2_jags$wind * data2_jags$wind + coeff$b[6]* data2_jags$ozone * data2_jags$wind
coeff = coefficients(mod3)
yhat = coeff$b[1] + coeff$b[2]* data3_jags$ozone + coeff$b[3]* data3_jags$wind + coeff$b[4]* data3_jags$ozone * data3_jags$ozone + coeff$b[5]* data3_jags$wind * data3_jags$wind + coeff$b[6]* data3_jags$ozone * data3_jags$wind
resid = yhat - data3_jags$y
plot(yhat, resid)
hist(resid,density )
hist(resid )
coeff = coefficients(mod3)
yhat = coeff$b[1] + coeff$b[2]* data3_jags$ozone + coeff$b[3]* data3_jags$wind + coeff$b[4]* data3_jags$ozone * data3_jags$ozone + coeff$b[5]* data3_jags$wind * data3_jags$wind + coeff$b[6]* data3_jags$ozone * data3_jags$wind
resid = yhat - data3_jags$y
plot(yhat, resid, ylim = c(-30,30))
coeff = coefficients(mod3)
yhat = coeff$b[1] + coeff$b[2]* data3_jags$ozone + coeff$b[3]* data3_jags$wind + coeff$b[4]* data3_jags$ozone * data3_jags$ozone + coeff$b[5]* data3_jags$wind * data3_jags$wind + coeff$b[6]* data3_jags$ozone * data3_jags$wind
resid = yhat - data3_jags$y
plot(yhat, resid, ylim = c(-30,30))
hist(resid,breaks = 5)
coeff = coefficients(mod3)
yhat = coeff$b[1] + coeff$b[2]* data3_jags$ozone + coeff$b[3]* data3_jags$wind + coeff$b[4]* data3_jags$ozone * data3_jags$ozone + coeff$b[5]* data3_jags$wind * data3_jags$wind + coeff$b[6]* data3_jags$ozone * data3_jags$wind
resid = yhat - data3_jags$y
plot(yhat, resid, ylim = c(-30,30))
hist(resid,breaks = 10)
coeff = coefficients(mod3)
yhat = coeff$b[1] + coeff$b[2]* data3_jags$ozone + coeff$b[3]* data3_jags$wind + coeff$b[4]* data3_jags$ozone * data3_jags$ozone + coeff$b[5]* data3_jags$wind * data3_jags$wind + coeff$b[6]* data3_jags$ozone * data3_jags$wind
resid = yhat - data3_jags$y
plot(yhat, resid, ylim = c(-30,30))
hist(resid,breaks = 3)
coeff = coefficients(mod3)
yhat = coeff$b[1] + coeff$b[2]* data3_jags$ozone + coeff$b[3]* data3_jags$wind + coeff$b[4]* data3_jags$ozone * data3_jags$ozone + coeff$b[5]* data3_jags$wind * data3_jags$wind + coeff$b[6]* data3_jags$ozone * data3_jags$wind
resid = yhat - data3_jags$y
plot(yhat, resid, ylim = c(-30,30))
hist(resid,breaks = 5)
coeff = coefficients(mod3)
yhat = coeff$b[1] + coeff$b[2]* data3_jags$ozone + coeff$b[3]* data3_jags$wind + coeff$b[4]* data3_jags$ozone * data3_jags$ozone + coeff$b[5]* data3_jags$wind * data3_jags$wind + coeff$b[6]* data3_jags$ozone * data3_jags$wind
resid = yhat - data3_jags$y
plot(yhat, resid, ylim = c(-30,30))
hist(resid,breaks = 10)
coeff = coefficients(mod3)
yhat = coeff$b[1] + coeff$b[2]* data3_jags$ozone + coeff$b[3]* data3_jags$wind + coeff$b[4]* data3_jags$ozone * data3_jags$ozone + coeff$b[5]* data3_jags$wind * data3_jags$wind + coeff$b[6]* data3_jags$ozone * data3_jags$wind
resid = yhat - data3_jags$y
plot(yhat, resid, ylim = c(-30,30))
hist(resid,breaks = 5)
coeff = coefficients(mod3)
yhat = coeff$b[1] + coeff$b[2]* data3_jags$ozone + coeff$b[3]* data3_jags$wind + coeff$b[4]* data3_jags$ozone * data3_jags$ozone + coeff$b[5]* data3_jags$wind * data3_jags$wind + coeff$b[6]* data3_jags$ozone * data3_jags$wind
resid = yhat - data3_jags$y
plot(yhat, resid, ylim = c(-30,30))
hist(resid,density = 2)
coeff = coefficients(mod3)
yhat = coeff$b[1] + coeff$b[2]* data3_jags$ozone + coeff$b[3]* data3_jags$wind + coeff$b[4]* data3_jags$ozone * data3_jags$ozone + coeff$b[5]* data3_jags$wind * data3_jags$wind + coeff$b[6]* data3_jags$ozone * data3_jags$wind
resid = yhat - data3_jags$y
plot(yhat, resid, ylim = c(-30,30))
hist(resid,density = 10)
coeff = coefficients(mod3)
yhat = coeff$b[1] + coeff$b[2]* data3_jags$ozone + coeff$b[3]* data3_jags$wind + coeff$b[4]* data3_jags$ozone * data3_jags$ozone + coeff$b[5]* data3_jags$wind * data3_jags$wind + coeff$b[6]* data3_jags$ozone * data3_jags$wind
resid = yhat - data3_jags$y
plot(yhat, resid, ylim = c(-30,30))
curve(resid)
coeff = coefficients(mod3)
yhat = coeff$b[1] + coeff$b[2]* data3_jags$ozone + coeff$b[3]* data3_jags$wind + coeff$b[4]* data3_jags$ozone * data3_jags$ozone + coeff$b[5]* data3_jags$wind * data3_jags$wind + coeff$b[6]* data3_jags$ozone * data3_jags$wind
resid = yhat - data3_jags$y
plot(yhat, resid, ylim = c(-30,30))
hist(resid)
coeff = coefficients(mod3)
yhat = coeff$b[1] + coeff$b[2]* data3_jags$ozone + coeff$b[3]* data3_jags$wind + coeff$b[4]* data3_jags$ozone * data3_jags$ozone + coeff$b[5]* data3_jags$wind * data3_jags$wind + coeff$b[6]* data3_jags$ozone * data3_jags$wind
resid = yhat - data3_jags$y
plot(yhat, resid, ylim = c(-30,30))
plot(density(resid))
library("rjags")
data("airquality")
head(airquality)
dat = na.omit(airquality)
head(dat)
par(mfrow = c(2,2))
plot(dat$Ozone, dat$Temp)
plot(dat$Solar.R, dat$Temp)
plot(dat$Wind, dat$Temp)
library("rjags")
mod_string = "model{
for (i in 1: length(y)){
y[i] ~ dnorm(mu[i], prec)
mu[i] = b[1] + b[2]* ozone[i] + b[3]*solar[i] + b[4]* wind[i]
}
for( j in 1:4){
b[j] ~ dnorm(0.0, 1.0/1.0e6)
}
prec ~ dgamma(5/2,25)
sig2 = 1/prec
sig  = sqrt(sig2)
}"
data_jags = list(y= dat$Temp, ozone = dat$Ozone, solar = dat$Solar.R, wind = dat$Wind)
mod = jags.model(textConnection(mod_string),data = data_jags, n.chains = 3)
update(mod,n.iter = 1e3)
params = c("b", "sig")
mod_sim = coda.samples(mod, variable.names = params, n.iter = 5e3)
mod_csim = as.mcmc(do.call(rbind, mod_sim))
summary(mod_sim)
coefficients(mod)
dic.samples(mod,n.iter = 1e3)
mod2_string = "model{
for (i in 1: length(y)){
y[i] ~ dnorm(mu[i], prec)
mu[i] = b[1] + b[2]* ozone[i] + b[3]* wind[i]
}
for( j in 1:3){
b[j] ~ dnorm(0.0, 1.0/1.0e6)
}
prec ~ dgamma(5/2,25)
sig2 = 1/prec
sig  = sqrt(sig2)
}"
data2_jags = list(y= dat$Temp, ozone = dat$Ozone, wind = dat$Wind)
mod2 = jags.model(textConnection(mod2_string),data = data2_jags, n.chains = 3)
update(mod2, n.iter = 1e3)
params2 = c("b","sig")
mod2_sim = coda.samples(mod2, variable.names = params2, n.iter = 5e3)
plot(mod2_sim)
gelman.diag(mod2_sim)
summary(mod2_sim)
dic.samples(mod2, n.iter = 1e3)
coeff = coefficients(mod2)
yhat = coeff$b[1] + coeff$b[2]* data2_jags$ozone + coeff$b[3]* data2_jags$wind
resid = yhat - data2_jags$y
plot(yhat, resid)
plot(density(resid))
qqnorm(resid)
mod3_string = "model{
for (i in 1: length(y)){
y[i] ~ dnorm(mu[i], prec)
mu[i] = b[1] + b[2]* ozone[i] + b[3]* wind[i] + b[4]* ozone[i]* ozone[i] + b[5]* wind[i]* wind[i] + b[6]* ozone[i]* wind[i]
}
for( j in 1:6){
b[j] ~ dnorm(0.0, 1.0/1.0e6)
}
prec ~ dgamma(5/2,25)
sig2 = 1/prec
sig  = sqrt(sig2)
}"
data3_jags = list(y= dat$Temp, ozone = dat$Ozone, wind = dat$Wind)
mod3 = jags.model(textConnection(mod3_string),data = data3_jags, n.chains = 3)
update(mod3, n.iter = 1e3)
params3 = c("b","sig")
mod3_sim = coda.samples(mod3, variable.names = params3, n.iter = 5e3)
summary(mod3_sim)
dic.samples(mod3, n.iter = 1e3)
coeff = coefficients(mod3)
yhat = coeff$b[1] + coeff$b[2]* data3_jags$ozone + coeff$b[3]* data3_jags$wind + coeff$b[4]* data3_jags$ozone * data3_jags$ozone + coeff$b[5]* data3_jags$wind * data3_jags$wind + coeff$b[6]* data3_jags$ozone * data3_jags$wind
resid = yhat - data3_jags$y
plot(yhat, resid, ylim = c(-30,30))
plot(density(resid))
